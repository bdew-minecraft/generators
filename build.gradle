buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'scala'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
}

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

if (project.hasProperty('buildnum')) {
    ext.simpleVersion = "${config.mod.version}.${project.buildnum}"
} else {
    ext.simpleVersion = "${config.mod.version}-DEV"
}

version = simpleVersion + '-mc' + config.minecraft.version

group = 'net.bdew'
archivesBaseName = config.mod.id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: config.parchment.version
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                register(config.mod.id) {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                register(config.mod.id) {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', config.mod.id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            forceExit false
            mods {
                register(config.mod.id) {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude '**/*.psd'
}

repositories {
    maven {
        name = "bdew"
        url = "https://jenkins.bdew.net/maven"
    }
    maven {
        name = "Azure-SLP"
        url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
        content {
            includeModule("com.kotori316", "ScalableCatsForce".toLowerCase())
            includeModule("org.typelevel", "cats-core_2.13")
            includeModule("org.typelevel", "cats-kernel_2.13")
        }
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://cursemaven.com"
    }
    repositories.stream().filter { it instanceof MavenArtifactRepository }.forEach { repo ->
        repo.content {
            excludeVersionByRegex(".*", ".*", ".*_mapped_snapshot_.*")
        }
    }
}

dependencies {
    minecraft(group: 'net.minecraftforge', name: 'forge', version: "${config.minecraft.version}-${config.forge.version}")

    compileOnly(group: 'org.scala-lang', name: 'scala-library', version: config.scala.version)

    runtimeOnly(group: "com.kotori316", name: "ScalableCatsForce".toLowerCase(), version: config.slp.version, classifier: "with-library") {
        transitive(false)
    }

    if (findProject(":bdlib") != null) {
        implementation project(":bdlib")
    } else {
        implementation fg.deobf("net.bdew:bdlib:${config.bdlib.version}-mc${config.minecraft.version}")
    }

    compileOnly fg.deobf("mezz.jei:jei-${config.minecraft.version}-common-api:${config.jei.version}")
    compileOnly fg.deobf("mezz.jei:jei-${config.minecraft.version}-forge-api:${config.jei.version}")

    compileOnly fg.deobf("curse.maven:ic2_classic-242942:${config.ic2c.fileId}")

    compileOnly "mekanism:Mekanism:${config.mekanism.version}:api"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : config.mod.id,
                "Specification-Vendor"    : "bdew",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : simpleVersion,
                "Implementation-Vendor"   : "bdew",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        maven(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://var/www/maven"
        }
    }
}

curseforge {
    apiKey = project.hasProperty("curseForgeApiKey") ? project.curseForgeApiKey : ""
    project {
        id = config.curseforge.id

        releaseType = "alpha"
        changelog = project.hasProperty("changelog") ? project.changelog : "No changelog available"

        addGameVersion config.minecraft.version

        mainArtifact(jar) {
            displayName = "Advanced Generators ${simpleVersion} (MC ${config.minecraft.version})"
        }

        relations {
            requiredDependency 'scalable-cats-force'
            requiredDependency 'bdlib'
            optionalDependency 'jei'
            optionalDependency 'mekanism'
            optionalDependency 'thermal-expansion'
            optionalDependency 'ic2-classic'
        }
    }
}

modrinth {
    token = project.hasProperty("modrinthApiKey") ? project.modrinthApiKey : ""
    projectId = config.modrinth.id
    versionName = "${simpleVersion} (MC ${config.minecraft.version})"
    versionNumber = simpleVersion
    versionType = "alpha"
    uploadFile = jar
    gameVersions = [config.minecraft.version]
    changelog = project.hasProperty("changelog") ? project.changelog : "No changelog available"
    dependencies {
        required.project "scalable-cats-force"
        required.project "bdlib"
    }
}